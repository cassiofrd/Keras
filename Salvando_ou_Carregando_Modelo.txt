# Salvando modelos já treinados para utilizar depois

# In this Colab we will use the TensorFlow 2.0 Beta version.

import time
import numpy as np
import matplotlib.pylab as plt

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_datasets as tfds
tfds.disable_progress_bar()

from tensorflow.keras import layers

# Vamos importar a base de dados de Gatos e Cachorros do TensorFlow

(train_examples, validation_examples), info = tfds.load(
    'cats_vs_dogs',
    split=['train[:80%]', 'train[80%:]'],
    with_info=True,
    as_supervised=True,
)

# Como as imagens não estão todas do mesmo tamanho devemos colocar no formato
# 224x224

def format_image(image, label):
  # `hub` image modules exepct their data normalized to the [0,1] range.
  image = tf.image.resize(image, (IMAGE_RES, IMAGE_RES))/255.0
  return  image, label

num_examples = info.splits['train'].num_examples

BATCH_SIZE = 32
IMAGE_RES = 224

train_batches      = train_examples.cache().shuffle(num_examples//4).map(format_image).batch(BATCH_SIZE).prefetch(1)
validation_batches = validation_examples.cache().map(format_image).batch(BATCH_SIZE).prefetch(1)

# Vamos utilizar o TensorFlow Hub para Transfer Learning

URL = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4"
feature_extractor = hub.KerasLayer(URL,input_shape=(IMAGE_RES, IMAGE_RES,3))

# Vamos "congelar" (freeze) as variáveis de modo que o treinamento somente
# modificar a última camada (a que tem as categorias)

feature_extractor.trainable = False

# Vamos então acrescentar uma nova camada classificatória

model = tf.keras.Sequential([
  feature_extractor,
  layers.Dense(2)
])

model.summary()

# Vamos treinar o modelo

model.compile(
  optimizer='adam', 
  loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),
  metrics=['accuracy'])

EPOCHS = 3
history = model.fit(train_batches,
                    epochs=EPOCHS,
                    validation_data=validation_batches)

# Agora vamos verificar as previsões

class_names = np.array(info.features['label'].names)
class_names

# Vamos modificar os índices para os nomes das classes.

image_batch, label_batch = next(iter(train_batches.take(1)))
image_batch = image_batch.numpy()
label_batch = label_batch.numpy()

predicted_batch = model.predict(image_batch)
predicted_batch = tf.squeeze(predicted_batch).numpy()
predicted_ids = np.argmax(predicted_batch, axis=-1)
predicted_class_names = class_names[predicted_ids]
predicted_class_names

# Vamos verificar então nas fotos as categorias originais e aquelas previstas
# pelo modelo

print("Labels: ", label_batch)
print("Predicted labels: ", predicted_ids)
plt.figure(figsize=(10,9))
for n in range(30):
  plt.subplot(6,5,n+1)
  plt.imshow(image_batch[n])
  color = "blue" if predicted_ids[n] == label_batch[n] else "red"
  plt.title(predicted_class_names[n].title(), color=color)
  plt.axis('off')
_ = plt.suptitle("Model predictions (blue: correct, red: incorrect)")

# Vamos salvar o modelo como .h5 do Keras

t = time.time()

export_path_keras = "./{}.h5".format(int(t))
print(export_path_keras)

model.save(export_path_keras)

# Vamos carregar o nosso modelo, .h5 Model

reloaded = tf.keras.models.load_model(
  export_path_keras, 
  # `custom_objects` tells keras how to load a `hub.KerasLayer`
  custom_objects={'KerasLayer': hub.KerasLayer})

reloaded.summary()

# Podemos verificar que o modelo carregado e o anterior dão o mesmo resultado

result_batch = model.predict(image_batch)
reloaded_result_batch = reloaded.predict(image_batch)

# A diferença entre os dois resultados será zero

(abs(result_batch - reloaded_result_batch)).max()

# Podemos treinar este modelo que carregamos

EPOCHS = 3
history = reloaded.fit(train_batches,
                    epochs=EPOCHS,
                    validation_data=validation_batches)

# Podemos também exportar o modelo como SavedModel

t = time.time()

export_path_sm = "./{}".format(int(t))
print(export_path_sm)

tf.saved_model.save(model, export_path_sm)












