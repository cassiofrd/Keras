# Regressão linear com TensorFlow
# Vamos prever a eficiência do combustível

pip install -q seaborn

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns


# Make numpy printouts easier to read.

np.set_printoptions(precision=3, suppress=True)

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

print(tf.__version__)

# Vamos baixar a base de dados

url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'
column_names = ['MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight','Acceleration', 'Model Year', 'Origin']
raw_dataset = pd.read_csv(url, names=column_names,na_values='?', comment='\t',sep=' ', skipinitialspace=True)

dataset = raw_dataset.copy()
dataset.tail()

# A nossa base de dados contem valores faltantes

dataset.isna().sum()

# Para facilitar vamos deletar as linhas para deixar este tutorial inicial simples

dataset = dataset.dropna()

# A variável "Origin" é categórica. Vamos transforma-la em numérica com one-hot

dataset['Origin'] = dataset['Origin'].map({1: 'USA', 2: 'Europe', 3: 'Japan'})

dataset = pd.get_dummies(dataset, prefix='', prefix_sep='')
dataset.tail()

# Vamos separar a base de dados entre treino e teste

train_dataset = dataset.sample(frac=0.8, random_state=0)
test_dataset = dataset.drop(train_dataset.index)

# Vamos inspecionar a base de dados

sns.pairplot(train_dataset[['MPG', 'Cylinders', 'Displacement', 'Weight']], diag_kind='kde')

# Vamos ver uma estatística geral dos dados

train_dataset.describe().transpose()

# Vamos separa a variável que queremos prever das demais

train_features = train_dataset.copy()
test_features = test_dataset.copy()

train_labels = train_features.pop('MPG')
test_labels = test_features.pop('MPG')

# Agora temos que normalizar os dados, ou seja, enquadrar as variáveis numéricas
# em um valor entre 0 e 1

train_dataset.describe().transpose()[['mean', 'std']]
normalizer = preprocessing.Normalization()
normalizer.adapt(np.array(train_features))
print(normalizer.mean.numpy())

# Vamos ver como ficaram os dados após a normalização

first = np.array(train_features[:1])

with np.printoptions(precision=2, suppress=True):
  print('First example:', first)
  print()
  print('Normalized:', normalizer(first).numpy())

# Preparados os dados, vamos aplicar a regressão linear
# Vamos começar com uma regressão linear simples com a variável independente
# MPG para prever Horsepower

horsepower = np.array(train_features['Horsepower'])
horsepower_normalizer = preprocessing.Normalization(input_shape=[1,])
horsepower_normalizer.adapt(horsepower)

# Vamos construir o modelo sequencial

horsepower_model = tf.keras.Sequential([
    horsepower_normalizer,
    layers.Dense(units=1)
])

horsepower_model.summary()

# Segue a previsão de MPG utilizando Horsepower como única variável x (vejamos
# apenas as dez primeiras observações, vejamos que não ficou boa a previsão)

horsepower_model.predict(horsepower[:10])

# Agora vamos configurar o treinamento do nosso modelo

horsepower_model.compile(
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error')

# Configurados os parâmetros, façamos o treinamento do modelo

%%time
history = horsepower_model.fit(
    train_features['Horsepower'], train_labels,
    epochs=100,
    # suppress logging
    verbose=0,
    # Calculate validation results on 20% of the training data
    validation_split = 0.2)

# Podemos visualizar o treinamento do modelo utilizando os dados guardados no
# objeto "history"

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()

# Vejamos como ficou o loss das bases de treino e teste

def plot_loss(history):
  plt.plot(history.history['loss'], label='loss')
  plt.plot(history.history['val_loss'], label='val_loss')
  plt.ylim([0, 10])
  plt.xlabel('Epoch')
  plt.ylabel('Error [MPG]')
  plt.legend()
  plt.grid(True)

plot_loss(history)

# Vamos guardar os resultados da base de teste

test_results = {}

test_results['horsepower_model'] = horsepower_model.evaluate(
    test_features['Horsepower'],
    test_labels, verbose=0)

# Como utilizamos uma única variável independente, representamos o modelo como
# uma função dependente apenas da nossa variável x:

x = tf.linspace(0.0, 250, 251)
y = horsepower_model.predict(x)

def plot_horsepower(x, y):
  plt.scatter(train_features['Horsepower'], train_labels, label='Data')
  plt.plot(x, y, color='k', label='Predictions')
  plt.xlabel('Horsepower')
  plt.ylabel('MPG')
  plt.legend()

plot_horsepower(x,y)

# Agora vamos fazer uma regressão múltipla (com mais de uma variável independente)
# que consiste em fazer a mesma aplicação, com a diferença de que x era uma única
# variável e agora é uma matriz (toda a base de dados)

linear_model = tf.keras.Sequential([
    normalizer,
    layers.Dense(units=1)
])

# Vamos ver se o resultado deste modelo é melhor que o do modelo simples

linear_model.predict(train_features[:10])

# Quando chamamos o modelo, sua matriz de pesos será construída. O kernel tem uma
# dimensão de (9,1).

linear_model.layers[1].kernel

# Vamos utilizar novamente compile e fit para determinar os parâmetros que
# precisamos e logo em seguida treinar o modelo

linear_model.compile(
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error')

%%time
history = linear_model.fit(
    train_features, train_labels, 
    epochs=100,
    # suppress logging
    verbose=0,
    # Calculate validation results on 20% of the training data
    validation_split = 0.2)

# Agora vamos ver como variou o loss a medida que o modelo com uma regressão
# múltipla foi treinado

plot_loss(history)

# Vamos guardar os resultados com base na base de teste para depois

test_results['linear_model'] = linear_model.evaluate(
    test_features, test_labels, verbose=0)

##################################################################################

# Vamos agora aplicar uma regressão DNN

# Utilizaremos para tanto, vamos utilizar o método "compile" para treinar o modelo

def build_and_compile_model(norm):
  model = keras.Sequential([
      norm,
      layers.Dense(64, activation='relu'),
      layers.Dense(64, activation='relu'),
      layers.Dense(1)
  ])

  model.compile(loss='mean_absolute_error',
                optimizer=tf.keras.optimizers.Adam(0.001))
  return model

# Vamos começar com um modelo com apenas 1 input, uma variável independente,
# "Horsepower"

dnn_horsepower_model = build_and_compile_model(horsepower_normalizer)

# Esse modelo tem uma quantidade maior de parâmetros a serem treinados como se vê
# no resultado do comando abaixo:

dnn_horsepower_model.summary()

# Agora vamos treinar o modelo

%%time
history = dnn_horsepower_model.fit(
    train_features['Horsepower'], train_labels,
    validation_split=0.2,
    verbose=0, epochs=100)

# Como vemos pela variação do loss logo abaixo, esse modelo possibilita um
# desempenho melhor do que o da regressão linear

plot_loss(history)

# Vamos plotar as observações e a linha que descreve o modelo

x = tf.linspace(0.0, 250, 251)
y = dnn_horsepower_model.predict(x)
plot_horsepower(x, y)

# Vamos guardar os resultados da previsão da base de teste para comparar com os
# outros modelos

test_results['dnn_horsepower_model'] = dnn_horsepower_model.evaluate(
    test_features['Horsepower'], test_labels,
    verbose=0)

# Repetindo o processo utilizando todos os dados como insumo, melhoramos a
# a performance ao utilizarmos o modelo na base de dados de validação

dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()

%%time
history = dnn_model.fit(
    train_features, train_labels,
    validation_split=0.2,
    verbose=0, epochs=100)

plot_loss(history)

# Novamente vamos salvar os resultados da previsão em nossa base de teste

test_results['dnn_model'] = dnn_model.evaluate(test_features, test_labels, verbose=0)

# Agora que já fiz todas as estimações, vamos comparar os resultados dos modelos

pd.DataFrame(test_results, index=['Mean absolute error [MPG]']).T

# Finally, predict have a look at the errors made by the model when making predictions on the test set:

test_predictions = dnn_model.predict(test_features).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [MPG]')
plt.ylabel('Predictions [MPG]')
lims = [0, 50]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims, lims)

# Vamos dar uma olhada na distribuição dos erros:

error = test_predictions - test_labels
plt.hist(error, bins=25)
plt.xlabel('Prediction Error [MPG]')
_ = plt.ylabel('Count')

# Se você achou o modelo ok, pode salva-lo para utilizar novamente:

dnn_model.save('dnn_model')

# E se você recarregar o modelo salvo, veja que este te dará o mesmo resultado
# de previsão, provando que o modelo foi salvo corretamente.

reloaded = tf.keras.models.load_model('dnn_model')

test_results['reloaded'] = reloaded.evaluate(
    test_features, test_labels, verbose=0)

pd.DataFrame(test_results, index=['Mean absolute error [MPG]']).T

