# Vamos fazer agora uma aplicação com Convolutional Neural Network
# A diferença em relação à rede neural simples é que a CNN conta com convolução
# (aplicação de um kernel, filtro) e pooling (processo de redução do
# tamanho das imagens já após a convolução com o objetivo de reduzir o tamanho
# da imagem (especificamente no maxpooling que vamos utilizar, selecionamos
# apenas os pixels com maiores valores em uma determinada área após a aplicação
# do filtro)).

# Vamos utilizar exatamente a mesma base de dados que utilizamos antes
# Como eu já tinha baixado os dados não vou baixar novamente, vou apenas importar
# aqueles que considero relevantes.

import tensorflow as tf

# Importamos o Dataset do TensorFlow

import tensorflow_datasets as tfds
tfds.disable_progress_bar()

# Outras bibliotecas que ajudarão, vamos baixar

import math
import numpy as np
import matplotlib.pyplot as plt
import logging
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

# Os dados são de imagens de roupas em preto e branco e baixa resolução
# que tem dimensão de 28 por 28 pixels
# Vamos começar separando os dados de treino e de teste

dataset, metadata = tfds.load('fashion_mnist', as_supervised=True, with_info=True)
train_dataset, test_dataset = dataset['train'], dataset['test']

# Vamos salvar os nomes de cada uma das classes (números) vistos que não estão
# no dataset

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# Vamos verificar o número de imagens utilizadas em cada uma das bases, treino
# e teste

num_train_examples = metadata.splits['train'].num_examples
num_test_examples = metadata.splits['test'].num_examples
print("Number of training examples: {}".format(num_train_examples))
print("Number of test examples:     {}".format(num_test_examples))

# Como sempre, visto que os pixels variam entre [0,255], para utilizar o modelo
# vamos normalizar as imagens dividindo cada pixel por 255 de modo que o valor
# de cada um deles irá variar em um intervalo [0,1].

def normalize(images, labels):
  images = tf.cast(images, tf.float32)
  images /= 255
  return images, labels

# A função map vai garantir que a função de normalização seja aplicada a cada uma
# das imagens que fazem parte da base, seja treino ou teste

train_dataset =  train_dataset.map(normalize)
test_dataset  =  test_dataset.map(normalize)

# A função .cache() guarda as imagens que estavam em disco em memória, aumentando
# a velocidade da etapa de treino

train_dataset =  train_dataset.cache()
test_dataset  =  test_dataset.cache()

# Vamos plotar as imagens para ver como parecem

for image, label in test_dataset.take(1):
  break

image = image.numpy().reshape((28,28))

# Vamos plotar uma das imagens

plt.figure()
plt.imshow(image, cmap=plt.cm.binary)
plt.colorbar()
plt.grid(False)
plt.show()

# Vamos plotar as 25 primeiras imagens da base de treino com seus nomes na parte
# de baixo

plt.figure(figsize=(10,10))
i = 0
for (image, label) in test_dataset.take(25):
    image = image.numpy().reshape((28,28))
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(image, cmap=plt.cm.binary)
    plt.xlabel(class_names[label])
    i += 1

plt.show()

# Agora vamos à parte interessantes, às redes convolucionais
# Logo abaixo explicamos como funciona o algorítmo que queremos utilizar

model = tf.keras.Sequential([
    # Abaixo o termo Conv2D é o que aplica o kernel (filtro)
    # O termo 32 consiste no output, ou seja, para cada imagem que temos teremos
    # 32 outras após a aplicação do filtro
    # o termo (3,3) consiste no kernel que vamos utilizar, será um filtro 3x3
    tf.keras.layers.Conv2D(32, (3,3), padding='same', activation=tf.nn.relu,
                           input_shape=(28, 28, 1)),
    # A próxima linha é uma linha de pooling, no caso utilizamos o maxpooling
    # utilizando uma matrix 2x2, promovendo a redução do tamanho das imagens
    # iniciais. As demais linhas são repetições alternadas destas etapas de
    # convolução (aplicação do kernel/filtro) e pooling (redução do tamanho da
    # imagem).
    tf.keras.layers.MaxPooling2D((2, 2), strides=2),
    tf.keras.layers.Conv2D(64, (3,3), padding='same', activation=tf.nn.relu),
    tf.keras.layers.MaxPooling2D((2, 2), strides=2),
    # A função flat logo abaixo pega os resultados obtidos acima e transforma
    # em um array de apenas uma dimensão
    tf.keras.layers.Flatten(),
    # Temos abaixo a construção de uma camada densa de 128 neurôneos
    tf.keras.layers.Dense(128, activation=tf.nn.relu),
    # Temos 10 classes, pois é o número de categorias utilizadas em nossos objetos
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])

# Vamos compilar o modelo exatamente como no caso das redes neurais simples

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(),
              metrics=['accuracy'])

# Vamos treinar nosso modelo utilizando os mesmos parâmetros de iteração, com a
# diferença que faremos um total de 10 repetições (epochs=10)

BATCH_SIZE = 32
train_dataset = train_dataset.cache().repeat().shuffle(num_train_examples).batch(BATCH_SIZE)
test_dataset = test_dataset.cache().batch(BATCH_SIZE)
model.fit(train_dataset, epochs=10, steps_per_epoch=math.ceil(num_train_examples/BATCH_SIZE))

# Modelo treinado, vamos ver a acurácia do mesmo aplicando este à nossa base de
# teste. Como a porcentagem baixou em relação a base de treino, há indícios de que
# tenha ocorrido algum nível de over fitting (é comparando estes dois resultados
# que identificamos a ocorrência de over fitting).

test_loss, test_accuracy = model.evaluate(test_dataset, steps=math.ceil(num_test_examples/32))
print('Accuracy on test dataset:', test_accuracy)

# Por fim, vamos fazer algumas previsões

for test_images, test_labels in test_dataset.take(1):
  test_images = test_images.numpy()
  test_labels = test_labels.numpy()
  predictions = model.predict(test_images)

predictions.shape

# Vamos dar uma olhada no resultado para a primeira imagem da base de teste

predictions[0]
np.argmax(predictions[0])
test_labels[0]

# Vamos mostrar graficamente o resultado para as 10 classes preditivas

def plot_image(i, predictions_array, true_labels, images):
  predictions_array, true_label, img = predictions_array[i], true_labels[i], images[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(img[...,0], cmap=plt.cm.binary)
  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'
  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array[i], true_label[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)
  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

# Vamos ver o resultado para a imagem inicial

i = 0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions, test_labels)

i = 12
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions, test_labels)

# Vamos plotar algumas previsões (azuis foram corretas e vermelhas erradas)

num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions, test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions, test_labels)

# Vamos utilizar o modelo para prever uma única imagem em específico
img = test_images[0]
print(img.shape)
img = np.array([img])
print(img.shape)
predictions_single = model.predict(img)
print(predictions_single)
plot_value_array(0, predictions_single, test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)
np.argmax(predictions_single[0])

